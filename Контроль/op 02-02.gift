$CATEGORY: $course$/top/OP-02-02

::cout 1::Для використання cout необхідно вказати простір імен {
    = std
    ~ stdio
    ~ conio
    ~ class
}

::cout 2::Для використання cout необхідно вказати простір імен {
    = std
    ~ stdio
    ~ tds
    ~ class
}

::cout 3::Для використання cout необхідно вказати простір імен {
    = std
    ~ using
    ~ conio
    ~ class
}

::cout 4::В конструкції cout ностанта endl виконує {
    = перевод на новий рядок
    ~ вставку пробілу
    ~ вставку табуляції
    ~ очистку рядка
}

::cout 5::В конструкції cout ностанта endl виконує {
    = перевод на новий рядок
    ~ очистку консолі
    ~ завершення файла
    ~ очистку рядка
}

::cin 1::Для використання cin необхідно вказати простір імен {
    = std
    ~ stdio
    ~ conio
    ~ class
}

::cin 2::Для використання cin необхідно вказати простір імен {
    = std
    ~ stdio
    ~ tds
    ~ class
}

::cin 3::Для використання cin необхідно вказати простір імен {
    = std
    ~ using
    ~ conio
    ~ class
}

::Перетворення 1::Оберіть тип на який неможливо перетворити значення int без втрати {
    = char
    ~ long int
    ~ long long int
    ~ double
}

::Перетворення 2::Оберіть тип на який неможливо перетворити значення int без втрати {
    = short int
    ~ long int
    ~ long long int
    ~ double
}

::Перетворення 3::Оберіть тип на який неможливо перетворити значення long int без втрати {
    = char
    ~ float
    ~ long long int
    ~ double
}

::Перетворення 4::Оберіть тип на який неможливо перетворити значення short int без втрати {
    = unsigned char
    ~ long int
    ~ long long int
    ~ double
}

::Перетворення 5::Оберіть тип на який неможливо перетворити значення unsigned int без втрати {
    = unsigned char
    ~ long int
    ~ long long int
    ~ double
}

::Перетворення 6::Оберіть тип на який неможливо перетворити значення unsigned short int без втрати {
    = bool
    ~ unsigned long int
    ~ long long int
    ~ double
}

::Розгалуження 1::Оберіть конструкцію, що не належить до розгалуження {
	=while
	~if-else
	~switch-case
	~(вираз_1)?(вираз_2)\:(вираз_3)
}

::Розгалуження 2::Оберіть конструкцію, що не належить до розгалуження {
	=do-while
	~if-else
	~switch-case
	~(вираз_1)?(вираз_2)\:(вираз_3)
}

::Розгалуження 3::Оберіть варіант розгалуження, що існує {
	=повне
	~стійке
	~розгалужене
	~інфінітивне
}

::Розгалуження 4::Оберіть варіант розгалуження, що існує {
	=неповне
	~стійке
	~розгалужене
	~інфінітивне
}

::Тернарний 1::В тернарному операторі, у випадку істинності першого виразу буде повернене значення{
	=другого виразу
	~третього виразу
	~четвертого виразу
	~значення NULL
}

::Тернарний 2::В тернарному операторі, у випадку істинності першого виразу буде повернене значення{
	=другого виразу
	~третього виразу
	~четвертого виразу
	~значення 1
}

::Тернарний 3::В тернарному операторі, у випадку істинності першого виразу буде повернене значення{
	=другого виразу
	~третього виразу
	~четвертого виразу
	~значення -1
}

::Тернарний 4::В тернарному операторі, у випадку хибності першого виразу буде повернене значення{
	=третього виразу
	~другого виразу
	~четвертого виразу
	~значення truе
}

::Тернарний 7::В тернарному операторі, у випадку хибності першого виразу буде повернене значення{
	=третього виразу
	~другого виразу
	~четвертого виразу
	~значення NULL
}

::Тернарний 5::В тернарному операторі, у випадку хибності першого виразу буде повернене значення{
	=третього виразу
	~другого виразу
	~четвертого виразу
	~значення О
}

::Тернарний 6::В тернарному операторі, у випадку хибності першого виразу буде повернене значення{
	=третього виразу
	~другого виразу
	~четвертого виразу
	~значення 1
}

