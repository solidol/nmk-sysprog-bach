$CATEGORY: $course$/top/OP-02-01



::cout 1::Для використання cout необхідно вказати простір імен "std"{TRUE}

::cout 2::Для використання cout необхідно вказати простір імен "class"{FALSE}

::cin 1::Для використання cin необхідно вказати простір імен "std"{TRUE}

::cin 2::Для використання cin необхідно вказати простір імен "class"{FALSE}

::Перетворення 1::Тип даних char можна перетворити в int{TRUE}

::Перетворення 2::Тип даних long int можна перетворити в int{FALSE}

::Перетворення 3::Тип даних int можна перетворити в double{TRUE}

::Перетворення 4::Тип даних double можна перетворити в char{FALSE}

::Перетворення 5::Тип даних float можна перетворити в double{TRUE}

::Перетворення 6::Тип даних int можна перетворити в long double{FALSE}

::Перетворення 7::Тип даних char можна перетворити в float{TRUE}

::Перетворення 8::Тип даних float можна перетворити в char{FALSE}

::Перетворення 9::Тип даних usigned char можна перетворити в float{TRUE}

::Перетворення 10::Тип даних unsigned long int можна перетворити в char{FALSE}

::Перетворення 11::Тип даних unsigned char можна перетворити в unsigned int{TRUE}

::Перетворення 12::Тип даних unsigned int можна перетворити в unsigned char{FALSE}

::Розгалуження 1::Розгалуження може мати повну та неповну форму{TRUE}

::Розгалуження 2::Розгалуження може мати тільки повну форму{FALSE}

::Розгалуження 3::Для розгалуження використовується оператор if-else{TRUE}

::Розгалуження 4::Для розгалуження використовується оператор do-while{FALSE}

::Розгалуження 5::Для розгалуження використовується оператор switch-case{TRUE}

::Розгалуження 6::Для розгалуження використовується оператор while...{FALSE}

::Тернарний 1::Тернарний оператор є компактним записом розгалуження у виразах{TRUE}

::Тернарний 2::Тернарний оператор є розгорнутим записом розгалуження у виразах{FALSE}

::Тернарний 3::Синтаксис тернарного оператора виглядає наступним чином: (вираз_1)?(вираз_2)\:(вираз_3){TRUE}

::Тернарний 4::Синтаксис тернарного оператора виглядає наступним чином: (вираз_1)??(вираз_2)\:(вираз_3){FALSE}

::Тернарний 5::Синтаксис тернарного оператора виглядає наступним чином: (вираз_1)?(вираз_2){FALSE}

::Тернарний 6::У разі істинності значення першого виразу тернарний оператор повердає значення другого виразу{TRUE}

::Тернарний 7::У разі істинності значення першого виразу тернарний оператор повердає значення третього виразу{FALSE}

::Тернарний 8::У разі не істинності значення першого виразу тернарний оператор повердає значення третього виразу{TRUE}





